
server:
  port: ${SERVER_PORT:8082}
spring:
  application:
    name: loyalty-voucher
  jpa:
    properties:
      hibernate:
      dialect: org.hibernate.dialect.PostgreSQLDialect
      format_sql: true
    show-sql: ${SHOW_SQL:false}
    hibernate:
      ddl-auto: update
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5433}/${DB_NAME:loyalty}?useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: ${DB_USER:dev}
    password: ${DB_PASSWORD:password}
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 30
      idle-timeout: 600000
      max-lifetime: 18000000
  profiles:
    active: ${ACTIVE_PROFILE:dev}
  kafka:
    producer:
     bootstrap-servers: ${KAFKA_SERVERS:10.20.0.11:9092}
     key-serializer: org.apache.kafka.common.serialization.StringSerializer
     value-serializer: org.apache.kafka.common.serialization.StringSerializer
    bootstrap-servers: ${KAFKA_SERVERS:10.20.0.11:9092}
    retries: 5
    deliveryTimeout: 20000
    requestTimeout: 20000
    poll:
      maxPollRecords: 500
      maxPollInterval: 300000

#        redis:
#          host: ${REDIS_HOST:localhost}
#          port: ${REDIS_PORT:6379}
#          jedis:
#            pool:
#              max-active: 200
#              max-idle: 200
#              min-idle: 50
#              test-on-borrow: true
#              test-on-return: true
#              test-while-idle: false
#              block-when-exhausted: true
#              max-wait: 10
#          lettuce:
#            pool:
#              time-between-eviction-runs: 30
#              min-idle: 60
#              num-test-per-eviction-run: 3
management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: prometheus,health

webclient:
  http:
    maxConnections: 200
    acquireTimeout: 5000
    connectionTimeout: 20000
    readTimeout: 20000
    writeTimeout: 20000
    keepAlive: true
    selectorThread: 1
    workerThread: 4
  retry:
    attempt: 5
    firstBackoff: 2
    maxBackoff: 5
  cms-service:
    base-url: ${CMS_SERVICE_BASE_URL}
    receive_customer_info: /api/v1/receiveCustomer/{customerCode}
    perform_update_customer: /api/v1/performUpdateCustomer
