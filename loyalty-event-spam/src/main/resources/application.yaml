server:
  port: ${SERVER_PORT:8081}
spring:
  application:
    name: loyalty-event-spam
  jpa:
    open-in-view: false
    properties:
      hibernate:
      dialect: org.hibernate.dialect.PostgreSQLDialect
      format_sql: true
    show-sql: ${SHOW_SQL:true}
    hibernate:
      ddl-auto: update
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5433}/${DB_NAME:loyalty}?useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: ${DB_USER:dev}
    password: ${DB_PASSWORD:password}
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 30
      idle-timeout: 600000
      max-lifetime: 18000000
  profiles:
    active: ${ACTIVE_PROFILE:local}
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    consumer:
      bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 500
    producer:
      bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 5

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      lettuce:
        pool:
          time-between-eviction-runs: 30
          min-idle: 60
          num-test-per-eviction-run: 3
          enabled: true
management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: prometheus,health,info

webclient:
  http:
    maxConnections: 200
    acquireTimeout: 5000
    connectionTimeout: 20000
    readTimeout: 20000
    writeTimeout: 20000
    keepAlive: true
    selectorThread: 1
    workerThread: 4
  retry:
    attempt: 5
    firstBackoff: 2
    maxBackoff: 5
  cms-service:
    base-url: ${CMS_SERVICE_BASE_URL}
    update_disbursements_amount: /api/v1/update_rank
